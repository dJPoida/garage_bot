// These are lifted directly from the MiniCSS docs
// @see https://minicss.org/docs#grid
$viewport-sm-min: 320px;
$viewport-sm-max: 767px;
$viewport-md-min: 768px;
$viewport-md-max: 1279px;
$viewport-lg-min: 1280px;

$color-primary: #cc7641;
$color-info: #0277bd;
$color-success: #1cb729;
$color-warning: #daab28;
$color-danger: #c22b2b;

@import "/node_modules/mini.css/dist/mini-dark.css";
@import "components/.components";
@import "pages/.pages";

:root {
  --a-link-color: #{$color-primary};
  --a-visited-color: adjust($color-primary, $lightness: -10%);
  --nav-link-color: #{$color-primary};
  --color-primary: #{$color-primary};
  --color-info: #{$color-info};
  --color-success: #{$color-success};
  --color-warning: #{$color-warning}; 
  --color-danger: #{$color-danger};
}

body {
  min-width: 320px;
}

#app {
  height: 100vh;
  width: 100vw;
  min-height: 100vh;
  min-width: $viewport-sm-min;
  overflow-x: hidden;
}

.app {
  position: relative;
  width: calc(100% - (var(--universal-padding) * 2));
  min-height: calc(100% - (var(--universal-padding) * 2));
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: var(--universal-padding);
}

.button-row {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  margin-top: var(--universal-padding);
}

.please-wait {
  display: flex;
  align-items: center;
  justify-content: center;
}

p {
  overflow: hidden;
  white-space: normal;
  word-break: break-word;
  text-align: center;
}

.card.fluid {
  padding: var(--universal-padding);

  &.success {
    --card-back-color: var(--color-success);
    --card-fore-color: #f8f8f8;
    --card-border-color: var(--color-success);
  }

  &.error,
  &.danger {
    --card-back-color: var(--color-danger);
    --card-fore-color: #f8f8f8;
    --card-border-color: var(--color-danger);
  }
}

span[class^="icon-"] {
  background-repeat: no-repeat;
}

span[class^="icon-"] + span {
  margin-left: var(--universal-margin);
}

button {
  &:disabled {
    pointer-events: none;
    opacity: 0.5;
  }
}

form {
  width: calc(
    100% - (var(--universal-margin) * 2) - (var(--universal-padding) * 2)
  );
}

hr {
  background: var(--form-border-color);
  width: calc(100% - (var(--universal-margin) * 2));
}

// Override some modal properties
[type="checkbox"].modal + div .card {
  max-height: 90vh;
  max-width: calc(100% - (var(--universal-margin) * 4));
  width: $viewport-sm-max;
}

// Add additional button styles
button.danger, [type="button"].danger, [type="submit"].danger, [type="reset"].danger, .button.danger, [role="button"].danger {
  --button-back-color: #{$color-danger};
  --button-fore-color: #f8f8f8;
}

button.danger:hover, button.danger:focus, [type="button"].danger:hover, [type="button"].danger:focus, [type="submit"].danger:hover, [type="submit"].danger:focus, [type="reset"].danger:hover, [type="reset"].danger:focus, .button.danger:hover, .button.danger:focus, [role="button"].danger:hover, [role="button"].danger:focus {
  --button-hover-back-color: #{darken($color-danger, 10)};
}

button.warning, [type="button"].warning, [type="submit"].warning, [type="reset"].warning, .button.warning, [role="button"].warning {
  --button-back-color: #{$color-warning};
  --button-fore-color: #f8f8f8;
}

button.warning:hover, button.warning:focus, [type="button"].warning:hover, [type="button"].warning:focus, [type="submit"].warning:hover, [type="submit"].warning:focus, [type="reset"].warning:hover, [type="reset"].warning:focus, .button.warning:hover, .button.warning:focus, [role="button"].warning:hover, [role="button"].warning:focus {
  --button-hover-back-color: #{darken($color-warning, 10)};
}